"""
Django settings for diecastcollector project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Optional: Cloudinary URL for media storage in production
# Expected format: cloudinary://API_KEY:API_SECRET@CLOUD_NAME
# Get and clean up CLOUDINARY_URL
CLOUDINARY_URL = os.environ.get('CLOUDINARY_URL', '').strip()

# Debug: Print CLOUDINARY_URL format (redacted)
if CLOUDINARY_URL:
    parts = CLOUDINARY_URL.split('@')
    if len(parts) > 1:
        cloud_name = parts[1]
        # Only show first few chars of key/secret portion
        key_secret = parts[0][:15] + '...' if len(parts[0]) > 15 else parts[0]
        print(f"CLOUDINARY_URL format check: {key_secret}@{cloud_name}")
    else:
        print(f"CLOUDINARY_URL does not contain '@' separator: {CLOUDINARY_URL[:10]}...")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'dev-insecure-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = [h.strip() for h in os.environ.get('ALLOWED_HOSTS', '').split(',') if h.strip()]
CSRF_TRUSTED_ORIGINS = [u.strip() for u in os.environ.get('CSRF_TRUSTED_ORIGINS', '').split(',') if u.strip()]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'inventory.apps.InventoryConfig',
    'widget_tweaks',
]

# Add Cloudinary apps (media storage) only if properly configured
# Define a reusable flag for Cloudinary activation
CLOUDINARY_ACTIVE = bool(CLOUDINARY_URL and CLOUDINARY_URL.lower().startswith('cloudinary://'))
if CLOUDINARY_ACTIVE:
    if 'cloudinary_storage' not in INSTALLED_APPS:
        INSTALLED_APPS.append('cloudinary_storage')
    if 'cloudinary' not in INSTALLED_APPS:
        INSTALLED_APPS.append('cloudinary')

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'inventory.middleware.SubscriptionCheckMiddleware',
]

ROOT_URLCONF = 'diecastcollector.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.debug',
                'inventory.context_processors.overdue_notification',
            ],
        },
    },
]

WSGI_APPLICATION = 'diecastcollector.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.parse(
        os.environ.get('DATABASE_URL', f"sqlite:///{BASE_DIR / 'db.sqlite3'}"),
        conn_max_age=600,
        ssl_require=not DEBUG,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
# Staticfiles storage is configured via STORAGES['staticfiles'] below

# Media files (Uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Django 5+ storages configuration
# Ensure Cloudinary is the default storage when active, and Whitenoise handles static files.
STORAGES = {
    'default': {
        'BACKEND': 'cloudinary_storage.storage.MediaCloudinaryStorage' if CLOUDINARY_ACTIVE else 'django.core.files.storage.FileSystemStorage',
    },
    'staticfiles': {
        'BACKEND': 'whitenoise.storage.CompressedManifestStaticFilesStorage',
    },
}

# If any CSS references cannot be resolved during manifest building, don't fail the build.
# This is safe for our use-case and avoids transient 3rd-party asset reference issues.
WHITENOISE_MANIFEST_STRICT = False

# Use Cloudinary for media storage whenever configured.
# Heroku's filesystem is ephemeral and cannot serve user uploads.
if CLOUDINARY_ACTIVE:
    print("Activating Cloudinary storage backend (found cloudinary:// URL)")
    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
else:
    print("Using default file storage (CLOUDINARY_URL not properly configured)")

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication settings
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'login'

# Message settings
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

# Razorpay settings
RAZORPAY_KEY_ID = os.environ.get('RAZORPAY_KEY_ID')
RAZORPAY_KEY_SECRET = os.environ.get('RAZORPAY_KEY_SECRET')
RAZORPAY_SUBSCRIPTION_PLAN_ID = 'plan_99rs_monthly'
SUBSCRIPTION_AMOUNT = 9900  # Amount in paise (99 INR)

# Market provider keys (set in .env)
EBAY_APP_ID = os.environ.get('EBAY_APP_ID')
HOBBYDB_API_KEY = os.environ.get('HOBBYDB_API_KEY')
# Optional: Facebook cookie string for Marketplace scraping (risk: complies with FB TOS)
FACEBOOK_COOKIE = os.environ.get('FACEBOOK_COOKIE')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')

# Base URL for link generation in emails
BASE_URL = os.environ.get('BASE_URL', 'http://localhost:8000')

# Security settings for production
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'inventory': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Email settings (configure these with your email provider)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development
DEFAULT_FROM_EMAIL = 'noreply@diecastcollector.com'
EMAIL_HOST = 'smtp.example.com'  # Update with your SMTP server
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'your-email@example.com'  # Update with your email
EMAIL_HOST_PASSWORD = 'your-password'  # Update with your password
